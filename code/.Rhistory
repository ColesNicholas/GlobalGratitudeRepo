data_main <- data_main %>% select(誰..StartDate:pageNo)
# Fetch the USA_02b (harmonized) survey data
data_USA_02b <- read.csv(file = here("data", "USA_02b_raw_harmonized.csv"))
data_USA_02b <- data_USA_02b %>%
rename("events_list" = "control_list")
# Fetch the USA_02c survey data
data_USA_02c <- read.csv(file = here("data", "USA_02c.csv"))
data_USA_02c <- data_USA_02c %>% select(StartDate:pageNo)
View(data_main)
#Fetch main survey data
data_main <- read.csv(file = here("data", "GlobalGratitude_Final.csv"))
data_USA_02b <- data_USA_02b %>%
rename("StartDate" = "誰..StartDate")
View(data_USA_02b)
#Fetch main survey data
data_main <- read.csv(file = here("data", "GlobalGratitude_Final.csv"))
data_main <- data_main %>%
rename("StartDate" = "誰..StartDate")
data_main <- data_main %>% select(StartDate:pageNo)
# Fetch the USA_02b (harmonized) survey data
data_USA_02b <- read.csv(file = here("data", "USA_02b_raw_harmonized.csv"))
data_USA_02b <- data_USA_02b %>%
rename("events_list" = "control_list")
# Fetch the USA_02c survey data
data_USA_02c <- read.csv(file = here("data", "USA_02c.csv"))
data_USA_02c <- data_USA_02c %>% select(StartDate:pageNo)
library(dplyr)
library(here)
# specify directory
i_am("code/Cleaned_Final_Dataset.R")
#Fetch main survey data
data_main <- read.csv(file = here("data", "GlobalGratitude_Final.csv"))
data_main <- data_main %>%
rename("StartDate" = "誰..StartDate")
data_main <- data_main %>% select(StartDate:pageNo)
# Fetch the USA_02b (harmonized) survey data
data_USA_02b <- read.csv(file = here("data", "USA_02b_raw_harmonized.csv"))
data_USA_02b <- data_USA_02b %>%
rename("events_list" = "control_list")
# Fetch the USA_02c survey data
data_USA_02c <- read.csv(file = here("data", "USA_02c.csv"))
data_USA_02c <- data_USA_02c %>% select(StartDate:pageNo)
#Match columns
data_main <- data_main %>%
mutate(across(names(data_USA_02c), ~ {
# Matching character columns
if (is.character(data_USA_02c[[cur_column()]])) {
return(as.character(.))
}
# Matching numeric or integer columns
else if (is.numeric(data_USA_02c[[cur_column()]])) {
return(as.numeric(.))
}
else {
return(.)
}
}))
# Read and combine the CSV files
data <- bind_rows(data_main, data_USA_02c)
data <- bind_rows(data, data_USA_02b)
#Clean data
data <- data %>%
#Removed test links and incomplete surveys
filter(DistributionChannel != "preview",
consent == 1,
Progress >= 95,
lab != "",
condition_type != "NA",
lab != "NA")
# fix known issues
data <- data %>%
# 4/22/2024 TUR_01 used real link for testing purposes
filter(ResponseId != "R_42KUGZSS76NgWH7",
ResponseId != "R_4W4EXfgeyk1rCYF",
ResponseId != "R_45Z862EIfzYcin4",
ResponseId != "R_7BhJx9Ci7THupmF",
ResponseId != "R_42Lv9fg5qi9V9xm",
ResponseId != "R_2kFa26mh78uevnz",
ResponseId != "R_4DRThnH8LgbEvM8",
ResponseId != "R_4r1kAEqQCo1PNn6",
ResponseId != "R_4GQErqyYDlRWVwZ",
ResponseId != "R_4SGF0GCHSHIN0ls",
ResponseId != "R_6Pndj5c7sr1pcU3",
ResponseId != "R_8lQxsY2ITg7HKh1",
ResponseId != "R_8HXsI5PQftiJUYk",
ResponseId != "R_8iVWI3CN49ACiUp",
#6/6/2024 Removed USA_01 duplicate data
ResponseId != "R_6rDfD5u84z6WufT",
#11/21/2024 Removed DZA_01 test data
ResponseId != "R_4ioYJK1zR2FgR4R",
ResponseId != "R_4OvlyOmeTsmLpFn",
ResponseId != "R_4BA1gbglSYnVyDK")
# Change the 'incentive' column from "volunteer" to "paid" for NOR_01 participants after 11/19/2024
data <- data %>%
mutate(StartDate = as.POSIXct(StartDate, format = "%m/%d/%Y %H:%M"),  # Ensure correct format
incentive = if_else(lab == "NOR_01" & StartDate > as.POSIXct("11/19/2024 0:00", format = "%m/%d/%Y %H:%M"),
"paid", incentive))
# Save the processed data to RDS
saveRDS(data,
file = here('data',
"GlobalGratitude_Final_Cleaned.Rds"))
# specify directory
i_am("code/GlobalGratitude_Graphs.Rmd")
# fetch survey
data <- readRDS(file = here("data", "GlobalGratitude_Final_Cleaned.Rds"))
View(data)
empathy <- data %>%
filter(lambda1 =! "NA")
empathy <- data %>%
filter(!is.na(lambda1))
empathy <- data %>%
filter(!is.na(lambda1))
kinship <- data %>%
filter(!is.na(lambda2))
write.csv(empathy,
file = here('data',
"empathy.csv"))
View(empathy)
empathy <- data %>%
filter(!is.na(lambda1)) %>%
select(empathy_family:empathy_3_help)
empathy <- data
View(empathy)
empathy <- data %>%
filter(!is.na(lambda1)) %>%
select(empathy_family:empathy_3_help, lambda1:pageNo)
View(empathy)
write.csv(empathy,
file = here('data',
"empathy.csv"))
empathy_time <- read.csv(file = here("data","empathy.csv"))
View(empathy_time)
empathy_time$Total_TimeInMinutes <- rowSums(data[, paste0("Page_", 1:36, "_TimeOnPage")], na.rm = TRUE) / 60
View(empathy_time)
colnames(data)
colnames(empathy_time)
empathy_time$Total_TimeInMinutes <- rowSums(data[, paste0("Page_", 1:36, "_TimeOnPage")], na.rm = TRUE) / 60
empathy_time$Total_TimeInMinutes <- rowSums(data[, paste("Page_", 1:36, "_TimeOnPage")], na.rm = TRUE) / 60
empathy_time$Total_TimeInMinutes <- rowSums(empathy_time[, paste0("Page_", 1:36, "_TimeOnPage")], na.rm = TRUE) / 60
empathy_time$Total_TimeInMinutes <- rowSums(empathy_time[, paste0("Page_", 59:69, "_TimeOnPage")], na.rm = TRUE) / 60
mean<- mean(empathy_time$Total_TimeInMinutesTotal_TimeInMinutes)
mean_time <- mean(empathy_time$Total_TimeInMinutes, na.rm = TRUE)
print(empathy_time$Total_TimeInMinutes)
View(empathy)
View(empathy_time)
empathy_time <- empathy_time %>%
filter(Total_TimeInMinutes == "0.00000000")
empathy_time <- empathy_time %>%
filter(Total_TimeInMinutes =! "0.00000000")
empathy_time <- read.csv(file = here("data","empathy.csv"))
empathy_time$Total_TimeInMinutes <- rowSums(empathy_time[, paste0("Page_", 59:69, "_TimeOnPage")], na.rm = TRUE) / 60
empathy_time <- empathy_time %>%
filter(Total_TimeInMinutes =! "0.00000000")
empathy_time <- empathy_time %>%
filter(Total_TimeInMinutes != 0)
mean_time <- mean(empathy_time$Total_TimeInMinutes, na.rm = TRUE)
median_time <- median(empathy_time$Total_TimeInMinutes, na.rm = TRUE)
empathy_time$Total_TimeInMinutes <- rowSums(empathy_time[, paste0("Page_", 59:69, "_TimeOnPage")], na.rm = TRUE)
median_time <- median(empathy_time$Total_TimeInMinutes, na.rm = TRUE)
# specify directory
i_am("code/GlobalGratitude_Graphs.Rmd")
# set up packages
library(here)
library(tidyverse)
library(qualtRics)
library(psych)
library(gridExtra)
library(lme4)
library(lmerTest)
library(emmeans)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# specify directory
i_am("code/GlobalGratitude_Graphs.Rmd")
# fetch survey
DF <- readRDS(file = here("data", "GlobalGratitude_Final_Cleaned.Rds"))
# select relevant variables
DF  <- DF %>% select(Status: envy_DO_envy_8,
lab : condition_type,
me_attention, meals_attention) %>%
# fix variable formatting
mutate_at(c('ResponseId', 'lab',
'condition', 'condition_type'),
as.factor)
View(DF)
DF  <- DF %>% select(Status: envy_8,
lab : condition_type,
me_attention, meals_attention) %>%
# fix variable formatting
mutate_at(c('ResponseId', 'lab',
'condition', 'condition_type'),
as.factor)
# set up packages
library(here)
library(tidyverse)
library(qualtRics)
library(psych)
library(gridExtra)
library(lme4)
library(lmerTest)
library(emmeans)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# specify directory
i_am("code/GlobalGratitude_Graphs.Rmd")
# fetch survey
DF <- readRDS(file = here("data", "GlobalGratitude_Final_Cleaned.Rds"))
# select relevant variables
DF  <- DF %>% select(Status: envy_8,
lab : condition_type,
me_attention, meals_attention) %>%
# fix variable formatting
mutate_at(c('ResponseId', 'lab',
'condition', 'condition_type'),
as.factor)
rel <-
sapply(X = DF$lab %>% unique() %>% as.character(),
simplify = F,
USE.NAMES = T,
FUN = function(x){
d <- DF %>%
filter(lab == x)
# gratitude
gra <- psych::alpha(x = d %>%
select(grateful, appreciative, thankful))$total[1] %>%
as.numeric()
# positive affect
pas <- psych::alpha(x = d %>%
select(happy, satisfied, content, joyful, pleased))$total[1] %>%
as.numeric()
# optimism
opt <- psych::alpha(x = d %>%
select(optimistic, hopeful))$total[1] %>%
as.numeric()
# negative affect
neg <- psych::alpha(x = d %>%
select(sad, depressed, anxious, nervous))$total[1] %>%
as.numeric()
# indebtedness
ind <- psych::alpha(x = d %>%
select(indebted, obligated))$total[1] %>%
as.numeric()
# envy
env <- psych::alpha(x = d %>%
select(envious, bitter, jealous))$total[1] %>%
as.numeric()
# life satisfaction
lif <- psych::alpha(x = d %>%
select(ls_1, ls_2, ls_3, ls_4, ls_5))$total[1] %>%
as.numeric()
# sense of self
sen <- psych::alpha(x = d %>%
select(self_image_circle, self_image))$total[1] %>%
as.numeric()
list(
gra = gra,
pas = pas,
opt = opt,
neg = neg,
ind = ind,
env = env,
lif = lif
) %>%
return()
}
)
# 7 is having problems w/ optimism and envy (NGA_02)
# 8 is having problems with envy (NGA_01)
# 3 (TUR_01) is having problems with indebtedness
rel <- rel %>% bind_rows()
View(rel)
DF <- DF %>%
rowwise() %>%
mutate(
# gratitude
gratitude_mean =
mean(c(grateful, appreciative, thankful),
na.rm = T),
# positive affect
pa_mean =
mean(c(happy, satisfied, content, joyful, pleased),
na.rm = T),
# optimism
optimistic_mean =
mean(c(optimistic, hopeful),
na.rm = T),
# negative affect
na_mean =
mean(c(sad, depressed, anxious, nervous),
na.rm = T),
# indebtendess
indebted_mean =
mean(c(indebted, obligated),
na.rm = T),
# envy
envy_mean =
mean(c(envious, bitter, jealous),
na.rm = T),
# life satisfaction
ls_mean =
mean(c(ls_1, ls_2, ls_3, ls_4, ls_5),
na.rm = T),
# sense of self
ss_mean =
mean(c(self_image_circle, self_image),
na.rm = T)) %>%
ungroup()
# delete vestigial variables
DF <- DF %>%
select(-c(grateful, appreciative, thankful,
happy, satisfied, content,
joyful, pleased, optimistic,
hopeful,  depressed, sad,  anxious,  nervous,
indebted, obligated,
envious, bitter, jealous,
ls_1, ls_2, ls_3,
ls_4, ls_5, self_image_circle,
self_image)
)
View(DF)
DF %>%
# pivot into long format so that we can facet
pivot_longer(cols = c(gratitude_mean : ss_mean),
names_to = "outcomes",
values_to = "value") %>%
# create ggplot
ggplot(data = .,
aes(x = value,
fill = condition_type,
colour = condition_type)) +
# facet by outcome
facet_wrap(~ outcomes) +
# density plot
geom_density(alpha = .3) +
# aes
theme_classic()
# create list of outcome variables
out.list <- c('gratitude_mean',
'pa_mean',
'optimistic_mean',
'na_mean',
'indebted_mean',
'envy_mean',
'ls_mean',
'ss_mean')
# for each outcome build model
results <- sapply(X = out.list,
simplify = F,
FUN = function(x){
m <- lmer(as.formula(paste0(x,
'~ condition_type + (1 + condition_type | lab)')
),
data = DF) %>%
summary()
return(m)
})
# simplify models due to singular fit
results2 <- sapply(X = out.list,
simplify = F,
FUN = function(x){
m <- lmer(as.formula(paste0(x,
'~ condition_type + (1 | lab)')
),
data = DF) %>%
summary()
return(m)
})
View(results)
# for each outcome build model
results3 <- sapply(X = out.list,
simplify = F,
FUN = function(x){
m <- lmer(as.formula(paste0(x,
'~ condition + (1 + condition | lab)')
),
data = DF)
emm <- emmeans(m,
pairwise ~ condition,
pbkrtest.limit = 9999)
return(list(m = summary(m),
emm = emm)
)
})
# simplify models due to convergence issues
results4 <- sapply(X = out.list,
simplify = F,
FUN = function(x){
m <- lmer(as.formula(paste0(x,
'~ condition + (1  | lab)')
),
data = DF)
emm <- emmeans(m,
pairwise ~ condition,
pbkrtest.limit = 9999)
return(list(m = summary(m),
emm = emm)
)
})
DF <- DF %>%
mutate(sex_name = case_when(
sex == 1 ~ "male",
sex == 2 ~ "female",
sex == 3 ~ "other"
))
View(DF)
# specify directory
i_am("code/GlobalGratitude_Graphs.Rmd")
# fetch survey
DF <- readRDS(file = here("data", "GlobalGratitude_Final_Cleaned.Rds"))
DF <- DF %>%
mutate(sex_name = case_when(
sex == 1 ~ "male",
sex == 2 ~ "female",
sex == 3 ~ "other"
))
DF %>%
group_by(sex_name) %>%
summarise(sex_count = n())
mean(DF$age)
sd(DF$age)
View(DF)
sex <- DF %>% filter(sex == "NA")
sex <- DF %>% filter(sex == NA)
View(sex)
unique(DF$sex)
sex <- DF %>% filter(is.na(sex))
View(sex)
age <- DF %>% filter(is.na(age))
mean(age$age)
sd(age$age)
View(DF)
age <- DF %>% filter(!is.na(age))
age <- DF %>% filter(!is.na(age))
mean(age$age)
sd(age$age)
filtered_data <- DF %>% filter(!is.na(age) & age <= 100)
mean(filtered_data$age)
sd(filtered_data$age)
filtered_data <- DF %>% filter(!is.na(age) & age => 100)
filtered_data <- DF %>% filter(!is.na(age) & age >= 100)
View(filtered_data)
filtered_data <- DF %>% filter(!is.na(age) & age >= 100) %>% select(age)
View(filtered_data)
DF %>%
group_by(lab)
DF %>%
group_by(lab) %>%
summarise(participant_count = n())
# specify directory
i_am("code/GlobalGratitude_Graphs.Rmd")
# fetch survey
data <- readRDS(file = here("data", "GlobalGratitude_Final_Cleaned.Rds"))
data$gratitude_all <- rowMeans(data[, c("grateful", "thankful", "appreciative")], na.rm = TRUE)
data$happy_all <- rowMeans(data[, c("happy", "satisfied", "content", "joyful", "pleased")], na.rm = TRUE)
data$sad_all <- rowMeans(data[, c("sad", "depressed", "anxious", "nervous")], na.rm = TRUE)
data$ls_all <- rowMeans(data[, c("ls_1", "ls_2", "ls_3", "ls_4", "ls_5")], na.rm = TRUE)
#Remove data without a mean dependent score
data <- data %>%
filter(gratitude_all != "NaN",
happy_all != "NaN",
sad_all != "NaN",
ls_all != "NaN")
data$condition_type <- factor(data$condition_type, levels = c("control", "intervention"))
data$condition_type <- relevel(data$condition_type, ref = "intervention")
data <- data %>%
mutate(country = case_when(
lab == "POL_01" ~ "Poland",
lab == "POL_02" ~ "Poland",
lab == "DNK_01" ~ "Denmark",
lab == "TUR_01" ~ "Turkey",
lab == "MYS_01" ~ "Malaysia",
lab == "USA_01" ~ "United States",
lab == "USA_02" ~ "United States",
lab == "USA_02b" ~ "United States",
lab == "USA_02c" ~ "United States",
lab == "NGA_01" ~ "Nigeria",
lab == "NGA_02" ~ "Nigeria",
lab == "CAN_01" ~ "Canada",
lab == "FRA_01" ~ "France",
lab == "AUS_01" ~ "Australia",
lab == "CHL_01" ~ "Chile",
lab == "DEU_01" ~ "Germany",
lab == "GRC_01" ~ "Greece",
lab == "HUN_01" ~ "Hungary",
lab == "ISR_01" ~ "Israel",
lab == "IRL_01" ~ "Ireland",
lab == "MEX_01" ~ "Mexico",
lab == "ITA_01" ~ "Italy",
lab == "PRT_01" ~ "Portugal",
lab == "BRA_01" ~ "Brazil",
lab == "NLD_01" ~ "Netherlands",
lab == "GBR_01" ~ "United Kingdom",
lab == "ESP_01" ~ "Spain",
lab == "ZAF_01" ~ "South Africa",
lab == "KOR_01" ~ "South Korea",
lab == "SWE_01" ~ "Sweden",
lab == "IND_01" ~ "India",
lab == "COL_01" ~ "Colombia",
lab == "CHN_01" ~ "China",
lab == "KAZ_01" ~ "Kazakhstan",
lab == "NOR_01" ~ "Norway",
lab == "JPN_01" ~ "Japan",
lab == "GHA_01" ~ "Ghana",
lab == "THA_01" ~ "Thailand",
lab == "MKD_01" ~ "Macedonia",
TRUE ~ NA_character_
)) %>%
filter(!is.na(country))
control_data <- subset(data, condition_type == "control")
intervention_data <- subset(data, condition_type == "intervention")
unique_labs <- unique(data$country)
condition_names <- c("list", "letter", "text", "hk.list", "sub", "god.letter")
