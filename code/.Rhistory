)
dosage_data$condition <- factor(dosage_data$condition)
# Fit linear regression model
lm_model <- lm(gratitude_mean ~ sc_mean, data = dosage_data)
summary(lm_model)
# Create scatter plot with linear regression line
sc_plot <- ggplot(dosage_data, aes(x = gratitude_mean, y = sc_mean, color = condition)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = sc_mean - sc_se, ymax = sc_mean + sc_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
name = "Condition") +
labs(title = "Study 1",
x = "Mean Gratitude",
y = "Mean Social Connection") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
# Print the plot
print(sc_plot)
# Calculate mean for 'ladder' by 'condition'
ladder_mean<-data%>%group_by(condition)%>%summarize(Mean=mean(ladder))
print(ladder_mean)
# Calculate mean for 'ladder' by 'condition' and subtract the mean of measurement only control
cond.means_2 <- data %>%
group_by(condition) %>%
summarize(Mean = mean(ladder)) %>%
mutate(Mean = Mean - 5.9)
# Calculate standard error for 'ladder' by 'condition'
std_errors <- data %>%
group_by(condition) %>%
summarize(Standard_Error = sd(ladder) / sqrt(n()))
# Create new dataframe
dosage_data <- data.frame(
condition = cond.means_1$condition,
gratitude_mean = cond.means_1$Mean,
ladder_mean = cond.means_2$Mean,
ladder_se = std_errors$Standard_Error
)
dosage_data$condition <- factor(dosage_data$condition)
# Fit linear regression model
lm_model <- lm(gratitude_mean ~ ladder_mean, data = dosage_data)
summary(lm_model)
# Create scatter plot with linear regression line
ladder_plot <- ggplot(dosage_data, aes(x = gratitude_mean, y = ladder_mean, color = condition)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = ladder_mean - ladder_se, ymax = ladder_mean + ladder_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
name = "Condition") +
labs(title = "Study 1",
x = "Mean Gratitude",
y = "Mean Attitude Towards Life") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
scale_y_continuous(labels = scales::number_format(accuracy = 0.1))
# Print the plot
print(ladder_plot)
# Calculate mean for 'self_image_total' by 'condition'
self_image_mean<-data%>%group_by(condition)%>%summarize(Mean=mean(self_image_total))
print(self_image_mean)
# Calculate mean for 'self_image_total' by 'condition' and subtract the mean of measurement only control
cond.means_2 <- data %>%
group_by(condition) %>%
summarize(Mean = mean(self_image_total)) %>%
mutate(Mean = Mean - 3.66)
# Calculate standard error for 'self_image_total' by 'condition'
std_errors <- data %>%
group_by(condition) %>%
summarize(Standard_Error = sd(self_image_total) / sqrt(n()))
# Create new dataframe
dosage_data <- data.frame(
condition = cond.means_1$condition,
gratitude_mean = cond.means_1$Mean,
self_image_mean = cond.means_2$Mean,
self_image_se = std_errors$Standard_Error
)
dosage_data$condition <- factor(dosage_data$condition)
# Fit linear regression model
lm_model <- lm(gratitude_mean ~ self_image_mean, data = dosage_data)
summary(lm_model)
# Create scatter plot with linear regression line
self_image_plot <- ggplot(dosage_data, aes(x = gratitude_mean, y = self_image_mean, color = condition)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = self_image_mean - self_image_se, ymax = self_image_mean + self_image_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
name = "Condition") +  # Assign specific colors
labs(title = "Study 1",
x = "Mean Gratitude",
y = "Mean Percieved Self Image") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # Center the plot title
legend.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()# Set background color to white
)
# Print the plot
print(self_image_plot)
library(dplyr)
library(effsize)
library(ggplot2)
library(qualtRics)
library(metafor)
library(scales)
library(ggtext)
library(RColorBrewer)
library(rnaturalearth)
library(Matrix)
library(ggtext)
library(tidyr)
library(sf)
library(here)
# specify directory
i_am("code/GlobalGratitude_Graphs.Rmd")
# fetch survey
data <- readRDS(file = here("data", "GlobalGratitude_Final_Cleaned.Rds"))
data$gratitude_all <- rowMeans(data[, c("grateful", "thankful", "appreciative")], na.rm = TRUE)
data$happy_all <- rowMeans(data[, c("happy", "satisfied", "content", "joyful", "pleased")], na.rm = TRUE)
data$sad_all <- rowMeans(data[, c("sad", "depressed", "anxious", "nervous")], na.rm = TRUE)
data$ls_all <- rowMeans(data[, c("ls_1", "ls_2", "ls_3", "ls_4", "ls_5")], na.rm = TRUE)
#Remove data without a mean dependent score
data <- data %>%
filter(gratitude_all != "NaN",
happy_all != "NaN",
sad_all != "NaN",
ls_all != "NaN")
data$condition_type <- factor(data$condition_type, levels = c("control", "intervention"))
data$condition_type <- relevel(data$condition_type, ref = "intervention")
data <- data %>%
mutate(country = case_when(
lab == "POL_01" ~ "Poland",
lab == "POL_02" ~ "Poland",
lab == "DNK_01" ~ "Denmark",
lab == "TUR_01" ~ "Turkey",
lab == "MYS_01" ~ "Malaysia",
lab == "USA_01" ~ "United States",
lab == "USA_02" ~ "United States",
lab == "USA_02b" ~ "United States",
lab == "USA_02c" ~ "United States",
lab == "NGA_01" ~ "Nigeria",
lab == "NGA_02" ~ "Nigeria",
lab == "CAN_01" ~ "Canada",
lab == "FRA_01" ~ "France",
lab == "AUS_01" ~ "Australia",
lab == "CHL_01" ~ "Chile",
lab == "DEU_01" ~ "Germany",
lab == "GRC_01" ~ "Greece",
lab == "HUN_01" ~ "Hungary",
lab == "ISR_01" ~ "Israel",
lab == "IRL_01" ~ "Ireland",
lab == "MEX_01" ~ "Mexico",
lab == "ITA_01" ~ "Italy",
lab == "PRT_01" ~ "Portugal",
lab == "BRA_01" ~ "Brazil",
lab == "NLD_01" ~ "Netherlands",
lab == "GBR_01" ~ "United Kingdom",
lab == "ESP_01" ~ "Spain",
lab == "ZAF_01" ~ "South Africa",
lab == "KOR_01" ~ "South Korea",
lab == "SWE_01" ~ "Sweden",
lab == "IND_01" ~ "India",
lab == "COL_01" ~ "Colombia",
lab == "CHN_01" ~ "China",
lab == "KAZ_01" ~ "Kazakhstan",
lab == "NOR_01" ~ "Norway",
lab == "JPN_01" ~ "Japan",
lab == "GHA_01" ~ "Ghana",
lab == "THA_01" ~ "Thailand",
TRUE ~ NA_character_
)) %>%
filter(!is.na(country))
control_data <- subset(data, condition_type == "control")
intervention_data <- subset(data, condition_type == "intervention")
unique_labs <- unique(data$country)
condition_names <- c("list", "letter", "text", "hk.list", "sub", "god.letter")
View(data)
View(data)
data <- data %>% select(StartDate:pageNo)
View(data)
unique(data$DistributionChannel)
unique(data$lab)
saveRDS(data,
file = here('data',
"GlobalGratitude_Final_Cleaned.Rds"))
data <- readRDS(file = here("data", "GlobalGratitude_Final_Cleaned.Rds"))
View(data)
save.csv(data,
file = here('data',
"GlobalGratitude_Final_Cleaned.csv"))
write.csv(data,
file = here('data',
"GlobalGratitude_Final_Cleaned.csv"))
View(data)
table(data$country)
lab_count <- table(data$labs)
lab_count <- table(data$lab)
print(lab_count)
# specify directory
i_am("code/GlobalGratitude_Graphs.Rmd")
# fetch survey
data <- readRDS(file = here("data", "GlobalGratitude_Final_Cleaned.Rds"))
library(dplyr)
library(here)
# specify directory
i_am("code/Cleaned_Final_Dataset.R")
#Fetch main survey data
data_main <- read.csv(file = here("data", "GlobalGratitude_Final.csv"))
data_main <- data_main %>%
rename("StartDate" = "Ã¯..StartDate")
data_main <- data_main %>% select(StartDate:gov_leaders_6, meals_attention:pageNo)
# Fetch the USA_02b (harmonized) survey data
data_USA_02b <- read.csv(file = here("data", "USA_02b_raw_harmonized.csv"))
data_USA_02b <- data_USA_02b %>%
rename("events_list" = "control_list")
# Fetch the USA_02c survey data
data_USA_02c <- read.csv(file = here("data", "USA_02c.csv"))
data_USA_02c <- data_USA_02c %>% select(StartDate:gov_leaders_6, meals_attention:pageNo)
#Match columns
data_main <- data_main %>%
mutate(across(names(data_USA_02c), ~ {
# Matching character columns
if (is.character(data_USA_02c[[cur_column()]])) {
return(as.character(.))
}
# Matching numeric or integer columns
else if (is.numeric(data_USA_02c[[cur_column()]])) {
return(as.numeric(.))
}
else {
return(.)
}
}))
# Read and combine the CSV files
data <- bind_rows(data_main, data_USA_02c)
data <- bind_rows(data, data_USA_02b)
#Clean data
data <- data %>%
#Removed test links and incomplete surveys
filter(DistributionChannel != "preview",
consent == 1,
Progress >= 95,
lab != "",
condition_type != "NA",
lab != "NA")
# fix known issues
data <- data %>%
# 4/22/2024 TUR_01 used real link for testing purposes
filter(ResponseId != "R_42KUGZSS76NgWH7",
ResponseId != "R_4W4EXfgeyk1rCYF",
ResponseId != "R_45Z862EIfzYcin4",
ResponseId != "R_7BhJx9Ci7THupmF",
ResponseId != "R_42Lv9fg5qi9V9xm",
ResponseId != "R_2kFa26mh78uevnz",
ResponseId != "R_4DRThnH8LgbEvM8",
ResponseId != "R_4r1kAEqQCo1PNn6",
ResponseId != "R_4GQErqyYDlRWVwZ",
ResponseId != "R_4SGF0GCHSHIN0ls",
ResponseId != "R_6Pndj5c7sr1pcU3",
ResponseId != "R_8lQxsY2ITg7HKh1",
ResponseId != "R_8HXsI5PQftiJUYk",
ResponseId != "R_8iVWI3CN49ACiUp",
#6/6/2024 Removed USA_01 duplicate data
ResponseId != "R_6rDfD5u84z6WufT",
#11/21/2024 Removed DZA_01 test data
ResponseId != "R_4ioYJK1zR2FgR4R",
ResponseId != "R_4OvlyOmeTsmLpFn",
ResponseId != "R_4BA1gbglSYnVyDK")
# Change the 'incentive' column from "volunteer" to "paid" for NOR_01 participants after 11/19/2024
data <- data %>%
mutate(StartDate = as.POSIXct(StartDate, format = "%m/%d/%Y %H:%M"),  # Ensure correct format
incentive = if_else(lab == "NOR_01" & StartDate > as.POSIXct("11/19/2024 0:00", format = "%m/%d/%Y %H:%M"),
"paid", incentive))
# Save the processed data to CSV and RDS
write.csv(data,
file = here('data',
"GlobalGratitude_Final_Cleaned.csv"))
saveRDS(data,
file = here('data',
"GlobalGratitude_Final_Cleaned.Rds"))
# specify directory
i_am("code/GlobalGratitude_Graphs.Rmd")
# fetch survey
data <- readRDS(file = here("data", "GlobalGratitude_Final_Cleaned.Rds"))
View(data)
library(dplyr)
library(here)
# specify directory
i_am("code/Cleaned_Final_Dataset.R")
#Fetch main survey data
data_main <- read.csv(file = here("data", "GlobalGratitude_Final.csv"))
data_main <- data_main %>% select(StartDate:pageNo)
View(data_USA_02c)
View(data_USA_02b)
View(data_main)
StartDate
data_USA_02b <- data_USA_02b %>%
rename("events_list" = "control_list")
library(dplyr)
library(here)
# specify directory
i_am("code/Cleaned_Final_Dataset.R")
#Fetch main survey data
data_main <- read.csv(file = here("data", "GlobalGratitude_Final.csv"))
data_main <- data_main %>% select(StartDate:pageNo)
View(data_main)
library(dplyr)
library(here)
# specify directory
i_am("code/Cleaned_Final_Dataset.R")
#Fetch main survey data
data_main <- read.csv(file = here("data", "GlobalGratitude_Final.csv"))
data_main <- data_main %>% select(Ã¯..StartDate$:pageNo)
library(dplyr)
library(here)
# specify directory
i_am("code/Cleaned_Final_Dataset.R")
#Fetch main survey data
data_main <- read.csv(file = here("data", "GlobalGratitude_Final.csv"))
data_main <- data_main %>% select(Ã¯..StartDate:pageNo)
# Fetch the USA_02b (harmonized) survey data
data_USA_02b <- read.csv(file = here("data", "USA_02b_raw_harmonized.csv"))
data_USA_02b <- data_USA_02b %>%
rename("events_list" = "control_list")
# Fetch the USA_02c survey data
data_USA_02c <- read.csv(file = here("data", "USA_02c.csv"))
data_USA_02c <- data_USA_02c %>% select(StartDate:pageNo)
#Match columns
data_main <- data_main %>%
mutate(across(names(data_USA_02c), ~ {
# Matching character columns
if (is.character(data_USA_02c[[cur_column()]])) {
return(as.character(.))
}
# Matching numeric or integer columns
else if (is.numeric(data_USA_02c[[cur_column()]])) {
return(as.numeric(.))
}
else {
return(.)
}
}))
data_main <- read.csv(file = here("data", "GlobalGratitude_Final.csv"))
data_main <- data_main %>% select(Ã¯..StartDate:pageNo)
# Fetch the USA_02b (harmonized) survey data
data_USA_02b <- read.csv(file = here("data", "USA_02b_raw_harmonized.csv"))
data_USA_02b <- data_USA_02b %>%
rename("events_list" = "control_list")
# Fetch the USA_02c survey data
data_USA_02c <- read.csv(file = here("data", "USA_02c.csv"))
data_USA_02c <- data_USA_02c %>% select(StartDate:pageNo)
View(data_main)
#Fetch main survey data
data_main <- read.csv(file = here("data", "GlobalGratitude_Final.csv"))
data_USA_02b <- data_USA_02b %>%
rename("StartDate" = "Ã¯..StartDate")
View(data_USA_02b)
#Fetch main survey data
data_main <- read.csv(file = here("data", "GlobalGratitude_Final.csv"))
data_main <- data_main %>%
rename("StartDate" = "Ã¯..StartDate")
data_main <- data_main %>% select(StartDate:pageNo)
# Fetch the USA_02b (harmonized) survey data
data_USA_02b <- read.csv(file = here("data", "USA_02b_raw_harmonized.csv"))
data_USA_02b <- data_USA_02b %>%
rename("events_list" = "control_list")
# Fetch the USA_02c survey data
data_USA_02c <- read.csv(file = here("data", "USA_02c.csv"))
data_USA_02c <- data_USA_02c %>% select(StartDate:pageNo)
library(dplyr)
library(here)
# specify directory
i_am("code/Cleaned_Final_Dataset.R")
#Fetch main survey data
data_main <- read.csv(file = here("data", "GlobalGratitude_Final.csv"))
data_main <- data_main %>%
rename("StartDate" = "Ã¯..StartDate")
data_main <- data_main %>% select(StartDate:pageNo)
# Fetch the USA_02b (harmonized) survey data
data_USA_02b <- read.csv(file = here("data", "USA_02b_raw_harmonized.csv"))
data_USA_02b <- data_USA_02b %>%
rename("events_list" = "control_list")
# Fetch the USA_02c survey data
data_USA_02c <- read.csv(file = here("data", "USA_02c.csv"))
data_USA_02c <- data_USA_02c %>% select(StartDate:pageNo)
#Match columns
data_main <- data_main %>%
mutate(across(names(data_USA_02c), ~ {
# Matching character columns
if (is.character(data_USA_02c[[cur_column()]])) {
return(as.character(.))
}
# Matching numeric or integer columns
else if (is.numeric(data_USA_02c[[cur_column()]])) {
return(as.numeric(.))
}
else {
return(.)
}
}))
# Read and combine the CSV files
data <- bind_rows(data_main, data_USA_02c)
data <- bind_rows(data, data_USA_02b)
#Clean data
data <- data %>%
#Removed test links and incomplete surveys
filter(DistributionChannel != "preview",
consent == 1,
Progress >= 95,
lab != "",
condition_type != "NA",
lab != "NA")
# fix known issues
data <- data %>%
# 4/22/2024 TUR_01 used real link for testing purposes
filter(ResponseId != "R_42KUGZSS76NgWH7",
ResponseId != "R_4W4EXfgeyk1rCYF",
ResponseId != "R_45Z862EIfzYcin4",
ResponseId != "R_7BhJx9Ci7THupmF",
ResponseId != "R_42Lv9fg5qi9V9xm",
ResponseId != "R_2kFa26mh78uevnz",
ResponseId != "R_4DRThnH8LgbEvM8",
ResponseId != "R_4r1kAEqQCo1PNn6",
ResponseId != "R_4GQErqyYDlRWVwZ",
ResponseId != "R_4SGF0GCHSHIN0ls",
ResponseId != "R_6Pndj5c7sr1pcU3",
ResponseId != "R_8lQxsY2ITg7HKh1",
ResponseId != "R_8HXsI5PQftiJUYk",
ResponseId != "R_8iVWI3CN49ACiUp",
#6/6/2024 Removed USA_01 duplicate data
ResponseId != "R_6rDfD5u84z6WufT",
#11/21/2024 Removed DZA_01 test data
ResponseId != "R_4ioYJK1zR2FgR4R",
ResponseId != "R_4OvlyOmeTsmLpFn",
ResponseId != "R_4BA1gbglSYnVyDK")
# Change the 'incentive' column from "volunteer" to "paid" for NOR_01 participants after 11/19/2024
data <- data %>%
mutate(StartDate = as.POSIXct(StartDate, format = "%m/%d/%Y %H:%M"),  # Ensure correct format
incentive = if_else(lab == "NOR_01" & StartDate > as.POSIXct("11/19/2024 0:00", format = "%m/%d/%Y %H:%M"),
"paid", incentive))
# Save the processed data to RDS
saveRDS(data,
file = here('data',
"GlobalGratitude_Final_Cleaned.Rds"))
# specify directory
i_am("code/GlobalGratitude_Graphs.Rmd")
# fetch survey
data <- readRDS(file = here("data", "GlobalGratitude_Final_Cleaned.Rds"))
View(data)
empathy <- data %>%
filter(lambda1 =! "NA")
empathy <- data %>%
filter(!is.na(lambda1))
empathy <- data %>%
filter(!is.na(lambda1))
kinship <- data %>%
filter(!is.na(lambda2))
write.csv(empathy,
file = here('data',
"empathy.csv"))
View(empathy)
empathy <- data %>%
filter(!is.na(lambda1)) %>%
select(empathy_family:empathy_3_help)
empathy <- data
View(empathy)
empathy <- data %>%
filter(!is.na(lambda1)) %>%
select(empathy_family:empathy_3_help, lambda1:pageNo)
View(empathy)
write.csv(empathy,
file = here('data',
"empathy.csv"))
empathy_time <- read.csv(file = here("data","empathy.csv"))
View(empathy_time)
empathy_time$Total_TimeInMinutes <- rowSums(data[, paste0("Page_", 1:36, "_TimeOnPage")], na.rm = TRUE) / 60
View(empathy_time)
colnames(data)
colnames(empathy_time)
empathy_time$Total_TimeInMinutes <- rowSums(data[, paste0("Page_", 1:36, "_TimeOnPage")], na.rm = TRUE) / 60
empathy_time$Total_TimeInMinutes <- rowSums(data[, paste("Page_", 1:36, "_TimeOnPage")], na.rm = TRUE) / 60
empathy_time$Total_TimeInMinutes <- rowSums(empathy_time[, paste0("Page_", 1:36, "_TimeOnPage")], na.rm = TRUE) / 60
empathy_time$Total_TimeInMinutes <- rowSums(empathy_time[, paste0("Page_", 59:69, "_TimeOnPage")], na.rm = TRUE) / 60
mean<- mean(empathy_time$Total_TimeInMinutesTotal_TimeInMinutes)
mean_time <- mean(empathy_time$Total_TimeInMinutes, na.rm = TRUE)
print(empathy_time$Total_TimeInMinutes)
View(empathy)
View(empathy_time)
empathy_time <- empathy_time %>%
filter(Total_TimeInMinutes == "0.00000000")
empathy_time <- empathy_time %>%
filter(Total_TimeInMinutes =! "0.00000000")
empathy_time <- read.csv(file = here("data","empathy.csv"))
empathy_time$Total_TimeInMinutes <- rowSums(empathy_time[, paste0("Page_", 59:69, "_TimeOnPage")], na.rm = TRUE) / 60
empathy_time <- empathy_time %>%
filter(Total_TimeInMinutes =! "0.00000000")
empathy_time <- empathy_time %>%
filter(Total_TimeInMinutes != 0)
mean_time <- mean(empathy_time$Total_TimeInMinutes, na.rm = TRUE)
median_time <- median(empathy_time$Total_TimeInMinutes, na.rm = TRUE)
empathy_time$Total_TimeInMinutes <- rowSums(empathy_time[, paste0("Page_", 59:69, "_TimeOnPage")], na.rm = TRUE)
median_time <- median(empathy_time$Total_TimeInMinutes, na.rm = TRUE)
